name: Test and (if main branch) publish

on:
  workflow_dispatch:
  push:

permissions:
  contents: read

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        # TODO: need to refactor tests to allow multiple versions tested at once.
        # Tests that delete-all integration configurations break tests that just
        # created them.
        #python-version: ["3.7", "3.8", "3.9", "3.10", "3.11", "3.12"]
        python-version: ["3.11"]
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    # You can test your matrix by printing the current Python version
    - name: Display Python version
      run: python -c "import sys; print(sys.version)"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install requests pyyaml
    - name: Run pip-audit to check for vulnerabilities
      uses: pypa/gh-action-pip-audit@v1.0.8
      with:
        inputs: .
    - name: Create and populate .cortex/config file
      env:
        CORTEX_API_KEY: ${{ secrets.CORTEX_API_KEY }}
      run: |
        mkdir $HOME/.cortex
        echo "[default]" > $HOME/.cortex/config
        echo "api_key = $CORTEX_API_KEY" >> $HOME/.cortex/config
        pwd
        ls -l $HOME/.cortex
        cat $HOME/.cortex/config
      shell: bash
    - name: Test with pytest
      env:
        CORTEX_API_KEY: ${{ secrets.CORTEX_API_KEY }}
        AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
      run: |
        pip install pytest pytest-cov
        pytest --cov=cortexapps_cli --cov-report term-missing --cov-report=json --cov-report=html
    - name: Upload coverage artifact
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: code coverage
        path: htmlcov/
  pypi:
    if: ${{ github.ref == 'refs/heads/main' }}
    runs-on: ubuntu-latest
    needs: [
       test
    ]
    steps:
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build requests pyyaml
    - name: Build package
      run: python -m build
    - name: Publish package
      uses: pypa/gh-action-pypi-publish@27b31702a0e7fc50959f5ad993c78deac1bdfc29
      with:
        user: __token__
        password: ${{ secrets.PYPI_API_TOKEN }}
  homebrew:
    if: ${{ github.ref == 'refs/heads/main' }}
    runs-on: ubuntu-latest
    needs: [
       test
    ]
    steps:
    - name: Get version
      id: get_version
      run: python -c 'import tomllib; print(tomllib.load(open("pyproject.toml", "rb"))["project"]["version"])' >> $GITHUB_OUTPUT

    - name: Create github release
      uses: a7ul/tar-action@v1.1.0
      id: compress
      with:
        command: c
        cwd: ./src/cortexapps_cli
        files: |
          ./cortex.py
        outPath: cortexapps-cli.tar.gz

    - name: Set SHA
      id: shasum
      run: |
        echo sha="$(shasum -a 256 cortexapps-cli.tar.gz | awk '{printf $1}')" >> $GITHUB_OUTPUT

    - name: Release
      uses: softprops/action-gh-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        # reference: https://github.com/extrawurst/gitui/blob/master/.github/workflows/cd.yml
        files: |
          ./release/*.tar.gz
          HISTORY.md

    - name: Bump homebrew-core formula
      uses: mislav/bump-homebrew-formula-action@v2
      if: "!contains(github.ref, '-')" # skip prereleases
      env:
        COMMITTER_TOKEN: ${{ secrets.BREW_TOKEN }}
      with:
        formula-name: cortexapps-cli
        # https://github.com/mislav/bump-homebrew-formula-action/issues/58
        formula-path: Formula/c/cortexapps-cli.rb
